// <auto-generated />
using System;
using Cinebook.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinebook.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cinebook.Domain.Entities.Cinema", b =>
                {
                    b.Property<Guid>("CinemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BaseTicketPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosingAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OpeningAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("CinemaId");

                    b.ToTable("Cinemas", (string)null);
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.MovieSession", b =>
                {
                    b.Property<Guid>("MovieSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CinemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieSessionId");

                    b.HasIndex("CinemaId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieSessions", (string)null);
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.Seat", b =>
                {
                    b.Property<Guid>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CinemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("SeatType")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("CinemaId");

                    b.ToTable("Seats", (string)null);
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.SeatReservation", b =>
                {
                    b.Property<Guid>("SeatReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<Guid>("MovieSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReservedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SeatReservationId");

                    b.HasIndex("MovieSessionId");

                    b.HasIndex("SeatId");

                    b.ToTable("SeatReservations", (string)null);
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresGenreId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.MovieSession", b =>
                {
                    b.HasOne("Cinebook.Domain.Entities.Cinema", "Cinema")
                        .WithMany("MovieSessions")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinebook.Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.Seat", b =>
                {
                    b.HasOne("Cinebook.Domain.Entities.Cinema", "Cinema")
                        .WithMany("Seats")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.SeatReservation", b =>
                {
                    b.HasOne("Cinebook.Domain.Entities.MovieSession", "MovieSession")
                        .WithMany("SeatReservations")
                        .HasForeignKey("MovieSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinebook.Domain.Entities.Seat", "Seat")
                        .WithMany("SeatReservations")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MovieSession");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("Cinebook.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinebook.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.Cinema", b =>
                {
                    b.Navigation("MovieSessions");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.MovieSession", b =>
                {
                    b.Navigation("SeatReservations");
                });

            modelBuilder.Entity("Cinebook.Domain.Entities.Seat", b =>
                {
                    b.Navigation("SeatReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
